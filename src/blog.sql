/*
MySQL Data Transfer
Source Host: localhost
Source Database: xiexx_blog
Target Host: localhost
Target Database: xiexx_blog
Date: 2017/1/15 11:23:27
*/

SET FOREIGN_KEY_CHECKS=0;
-- ----------------------------
-- Table structure for blog
-- ----------------------------
CREATE TABLE `blog` (
  `id` varchar(255) NOT NULL DEFAULT '',
  `title` varchar(50) NOT NULL,
  `secondTitle` varchar(30) DEFAULT NULL,
  `catalog` varchar(20) NOT NULL,
  `md` longtext NOT NULL,
  `display` longtext,
  `auther` varchar(30) DEFAULT NULL,
  `publishTime` date DEFAULT NULL,
  `img` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `date` (`publishTime`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for blog_views
-- ----------------------------
CREATE TABLE `blog_views` (
  `id` varchar(255) NOT NULL DEFAULT '',
  `views` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for book
-- ----------------------------
CREATE TABLE `book` (
  `id` varchar(50) NOT NULL DEFAULT '',
  `name` varchar(30) NOT NULL,
  `catalog` varchar(20) DEFAULT NULL,
  `img` varchar(255) NOT NULL,
  `description` varchar(100) DEFAULT NULL,
  `publishTime` date DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `bookdate` (`publishTime`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for book_index
-- ----------------------------
CREATE TABLE `book_index` (
  `id` varchar(50) NOT NULL,
  `label` varchar(20) NOT NULL,
  `path` varchar(200) DEFAULT '0',
  `order` smallint(6) DEFAULT '1',
  `level` smallint(6) DEFAULT '1' COMMENT '层级，方便根据层级查询',
  `url` varchar(200) DEFAULT NULL,
  `type` smallint(6) DEFAULT '1' COMMENT '扩展不同菜单时用',
  `style` varchar(50) DEFAULT NULL COMMENT 'ui 样式',
  `disabled` smallint(6) DEFAULT '0',
  `bookId` varchar(50) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `bookid` (`bookId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for catalog
-- ----------------------------
CREATE TABLE `catalog` (
  `id` varchar(50) NOT NULL,
  `label` varchar(20) NOT NULL,
  `path` varchar(200) DEFAULT '0',
  `order` smallint(6) DEFAULT '1',
  `level` smallint(6) DEFAULT '1' COMMENT '层级，方便根据层级查询',
  `url` varchar(200) DEFAULT NULL,
  `type` smallint(6) DEFAULT '1' COMMENT '扩展不同业务时用',
  `style` varchar(50) DEFAULT NULL COMMENT 'ui 样式',
  `disabled` smallint(6) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for nav
-- ----------------------------
CREATE TABLE `nav` (
  `id` varchar(50) NOT NULL,
  `label` varchar(20) NOT NULL,
  `path` varchar(200) DEFAULT '0',
  `order` smallint(6) DEFAULT '1',
  `level` smallint(6) DEFAULT '1' COMMENT '层级，方便根据层级查询',
  `url` varchar(200) DEFAULT NULL,
  `type` smallint(6) DEFAULT '1' COMMENT '扩展不同菜单时用',
  `style` varchar(50) DEFAULT NULL COMMENT 'ui 样式',
  `disabled` smallint(6) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for site_config
-- ----------------------------
CREATE TABLE `site_config` (
  `k` varchar(20) NOT NULL DEFAULT '',
  `v` varchar(500) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records 
-- ----------------------------
INSERT INTO `blog` VALUES ('1', '个性化宝贝分类', 'gagagagaga', 'java', 'gagagaa\r\n![](http://ohtnk29z2.bkt.clouddn.com/148145167885749301.jpg)\r\n\r\n```\r\npackage org.bumishi.admin.interfaces.web;\r\n\r\nimport com.qiniu.common.QiniuException;\r\nimport com.qiniu.http.Response;\r\nimport org.bumishi.admin.config.ApplicationConfig;\r\nimport org.bumishi.toolbox.qiniu.QiNiuApi;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\nimport org.springframework.web.bind.annotation.RestController;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport java.io.IOException;\r\nimport java.util.Random;\r\n\r\n/**\r\n * @author qiang.xie\r\n * @date 2016/12/9\r\n */\r\n@RequestMapping(\"/upload\")\r\n@RestController\r\npublic class UploadController {\r\n\r\n    @Autowired\r\n    protected QiNiuApi qiNiuApi;\r\n\r\n    @Autowired\r\n    protected ApplicationConfig applicationConfig;\r\n\r\n    @PostMapping(\"/image\")\r\n    public UploadResponse uploadImage(@RequestParam(\"editormd-image-file\") MultipartFile file) throws IOException {\r\n        String key = System.currentTimeMillis() + \"\" + new Random().nextInt(10000) + file.getOriginalFilename();\r\n        Response response = qiNiuApi.upload(file.getBytes(), key, applicationConfig.getQiniu_bucket());\r\n        return create(response, key);\r\n    }\r\n\r\n    private UploadResponse create(Response response, String filename) {\r\n        UploadResponse uploadResponse = new UploadResponse();\r\n        if (response == null || !response.isOK()) {\r\n\r\n            uploadResponse.setSuccess(0);\r\n            try {\r\n                uploadResponse.setMessage(response.bodyString());\r\n            } catch (QiniuException e) {\r\n                e.printStackTrace();\r\n            }\r\n        } else {\r\n\r\n            uploadResponse.setSuccess(1);\r\n            uploadResponse.setUrl(applicationConfig.getQiniu_domain() + \"/\" + filename);\r\n        }\r\n        return uploadResponse;\r\n    }\r\n\r\n    public class UploadResponse {\r\n\r\n        //        {\r\n//            success : 0 | 1,           // 0 表示上传失败，1 表示上传成功\r\n//                    message : \"提示的信息，上传成功或上传失败及错误信息等。\",\r\n//                url     : \"图片地址\"        // 上传成功时才返回\r\n//        }\r\n        public int success;\r\n\r\n        public String url;\r\n\r\n        public String message;\r\n\r\n        public int getSuccess() {\r\n            return success;\r\n        }\r\n\r\n        public void setSuccess(int success) {\r\n            this.success = success;\r\n        }\r\n\r\n        public String getUrl() {\r\n            return url;\r\n        }\r\n\r\n        public void setUrl(String url) {\r\n            this.url = url;\r\n        }\r\n\r\n        public String getMessage() {\r\n            return message;\r\n        }\r\n\r\n        public void setMessage(String message) {\r\n            this.message = message;\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\n```', '<p>gagagaa<br><img src=\"http://ohtnk29z2.bkt.clouddn.com/148145167885749301.jpg\" alt=\"\"></p>\r\n<pre class=\"prettyprint linenums prettyprinted\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">package</span><span class=\"pln\"> org</span><span class=\"pun\">.</span><span class=\"pln\">xiexx</span><span class=\"pun\">.</span><span class=\"pln\">admin</span><span class=\"pun\">.</span><span class=\"pln\">interfaces</span><span class=\"pun\">.</span><span class=\"pln\">web</span><span class=\"pun\">;</span></code></li><li class=\"L1\"><code></code></li><li class=\"L2\"><code><span class=\"kwd\">import</span><span class=\"pln\"> com</span><span class=\"pun\">.</span><span class=\"pln\">qiniu</span><span class=\"pun\">.</span><span class=\"pln\">common</span><span class=\"pun\">.</span><span class=\"typ\">QiniuException</span><span class=\"pun\">;</span></code></li><li class=\"L3\"><code><span class=\"kwd\">import</span><span class=\"pln\"> com</span><span class=\"pun\">.</span><span class=\"pln\">qiniu</span><span class=\"pun\">.</span><span class=\"pln\">http</span><span class=\"pun\">.</span><span class=\"typ\">Response</span><span class=\"pun\">;</span></code></li><li class=\"L4\"><code><span class=\"kwd\">import</span><span class=\"pln\"> org</span><span class=\"pun\">.</span><span class=\"pln\">xiexx</span><span class=\"pun\">.</span><span class=\"pln\">admin</span><span class=\"pun\">.</span><span class=\"pln\">config</span><span class=\"pun\">.</span><span class=\"typ\">ApplicationConfig</span><span class=\"pun\">;</span></code></li><li class=\"L5\"><code><span class=\"kwd\">import</span><span class=\"pln\"> org</span><span class=\"pun\">.</span><span class=\"pln\">xiexx</span><span class=\"pun\">.</span><span class=\"pln\">toolbox</span><span class=\"pun\">.</span><span class=\"pln\">qiniu</span><span class=\"pun\">.</span><span class=\"typ\">QiNiuApi</span><span class=\"pun\">;</span></code></li><li class=\"L6\"><code><span class=\"kwd\">import</span><span class=\"pln\"> org</span><span class=\"pun\">.</span><span class=\"pln\">springframework</span><span class=\"pun\">.</span><span class=\"pln\">beans</span><span class=\"pun\">.</span><span class=\"pln\">factory</span><span class=\"pun\">.</span><span class=\"pln\">annotation</span><span class=\"pun\">.</span><span class=\"typ\">Autowired</span><span class=\"pun\">;</span></code></li><li class=\"L7\"><code><span class=\"kwd\">import</span><span class=\"pln\"> org</span><span class=\"pun\">.</span><span class=\"pln\">springframework</span><span class=\"pun\">.</span><span class=\"pln\">web</span><span class=\"pun\">.</span><span class=\"pln\">bind</span><span class=\"pun\">.</span><span class=\"pln\">annotation</span><span class=\"pun\">.</span><span class=\"typ\">PostMapping</span><span class=\"pun\">;</span></code></li><li class=\"L8\"><code><span class=\"kwd\">import</span><span class=\"pln\"> org</span><span class=\"pun\">.</span><span class=\"pln\">springframework</span><span class=\"pun\">.</span><span class=\"pln\">web</span><span class=\"pun\">.</span><span class=\"pln\">bind</span><span class=\"pun\">.</span><span class=\"pln\">annotation</span><span class=\"pun\">.</span><span class=\"typ\">RequestMapping</span><span class=\"pun\">;</span></code></li><li class=\"L9\"><code><span class=\"kwd\">import</span><span class=\"pln\"> org</span><span class=\"pun\">.</span><span class=\"pln\">springframework</span><span class=\"pun\">.</span><span class=\"pln\">web</span><span class=\"pun\">.</span><span class=\"pln\">bind</span><span class=\"pun\">.</span><span class=\"pln\">annotation</span><span class=\"pun\">.</span><span class=\"typ\">RequestParam</span><span class=\"pun\">;</span></code></li><li class=\"L0\"><code><span class=\"kwd\">import</span><span class=\"pln\"> org</span><span class=\"pun\">.</span><span class=\"pln\">springframework</span><span class=\"pun\">.</span><span class=\"pln\">web</span><span class=\"pun\">.</span><span class=\"pln\">bind</span><span class=\"pun\">.</span><span class=\"pln\">annotation</span><span class=\"pun\">.</span><span class=\"typ\">RestController</span><span class=\"pun\">;</span></code></li><li class=\"L1\"><code><span class=\"kwd\">import</span><span class=\"pln\"> org</span><span class=\"pun\">.</span><span class=\"pln\">springframework</span><span class=\"pun\">.</span><span class=\"pln\">web</span><span class=\"pun\">.</span><span class=\"pln\">multipart</span><span class=\"pun\">.</span><span class=\"typ\">MultipartFile</span><span class=\"pun\">;</span></code></li><li class=\"L2\"><code></code></li><li class=\"L3\"><code><span class=\"kwd\">import</span><span class=\"pln\"> java</span><span class=\"pun\">.</span><span class=\"pln\">io</span><span class=\"pun\">.</span><span class=\"typ\">IOException</span><span class=\"pun\">;</span></code></li><li class=\"L4\"><code><span class=\"kwd\">import</span><span class=\"pln\"> java</span><span class=\"pun\">.</span><span class=\"pln\">util</span><span class=\"pun\">.</span><span class=\"typ\">Random</span><span class=\"pun\">;</span></code></li><li class=\"L5\"><code></code></li><li class=\"L6\"><code><span class=\"com\">/**</span></code></li><li class=\"L7\"><code><span class=\"com\"> * @author qiang.xie</span></code></li><li class=\"L8\"><code><span class=\"com\"> * @date 2016/12/9</span></code></li><li class=\"L9\"><code><span class=\"com\"> */</span></code></li><li class=\"L0\"><code><span class=\"lit\">@RequestMapping</span><span class=\"pun\">(</span><span class=\"str\">\"/upload\"</span><span class=\"pun\">)</span></code></li><li class=\"L1\"><code><span class=\"lit\">@RestController</span></code></li><li class=\"L2\"><code><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">UploadController</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L3\"><code></code></li><li class=\"L4\"><code><span class=\"pln\">    </span><span class=\"lit\">@Autowired</span></code></li><li class=\"L5\"><code><span class=\"pln\">    </span><span class=\"kwd\">protected</span><span class=\"pln\"> </span><span class=\"typ\">QiNiuApi</span><span class=\"pln\"> qiNiuApi</span><span class=\"pun\">;</span></code></li><li class=\"L6\"><code></code></li><li class=\"L7\"><code><span class=\"pln\">    </span><span class=\"lit\">@Autowired</span></code></li><li class=\"L8\"><code><span class=\"pln\">    </span><span class=\"kwd\">protected</span><span class=\"pln\"> </span><span class=\"typ\">ApplicationConfig</span><span class=\"pln\"> applicationConfig</span><span class=\"pun\">;</span></code></li><li class=\"L9\"><code></code></li><li class=\"L0\"><code><span class=\"pln\">    </span><span class=\"lit\">@PostMapping</span><span class=\"pun\">(</span><span class=\"str\">\"/image\"</span><span class=\"pun\">)</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"typ\">UploadResponse</span><span class=\"pln\"> uploadImage</span><span class=\"pun\">(</span><span class=\"lit\">@RequestParam</span><span class=\"pun\">(</span><span class=\"str\">\"editormd-image-file\"</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"typ\">MultipartFile</span><span class=\"pln\"> file</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"kwd\">throws</span><span class=\"pln\"> </span><span class=\"typ\">IOException</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L2\"><code><span class=\"pln\">        </span><span class=\"typ\">String</span><span class=\"pln\"> key </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">System</span><span class=\"pun\">.</span><span class=\"pln\">currentTimeMillis</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"str\">\"\"</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">Random</span><span class=\"pun\">().</span><span class=\"pln\">nextInt</span><span class=\"pun\">(</span><span class=\"lit\">10000</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> file</span><span class=\"pun\">.</span><span class=\"pln\">getOriginalFilename</span><span class=\"pun\">();</span></code></li><li class=\"L3\"><code><span class=\"pln\">        </span><span class=\"typ\">Response</span><span class=\"pln\"> response </span><span class=\"pun\">=</span><span class=\"pln\"> qiNiuApi</span><span class=\"pun\">.</span><span class=\"pln\">upload</span><span class=\"pun\">(</span><span class=\"pln\">file</span><span class=\"pun\">.</span><span class=\"pln\">getBytes</span><span class=\"pun\">(),</span><span class=\"pln\"> key</span><span class=\"pun\">,</span><span class=\"pln\"> applicationConfig</span><span class=\"pun\">.</span><span class=\"pln\">getQiniu_bucket</span><span class=\"pun\">());</span></code></li><li class=\"L4\"><code><span class=\"pln\">        </span><span class=\"kwd\">return</span><span class=\"pln\"> create</span><span class=\"pun\">(</span><span class=\"pln\">response</span><span class=\"pun\">,</span><span class=\"pln\"> key</span><span class=\"pun\">);</span></code></li><li class=\"L5\"><code><span class=\"pln\">    </span><span class=\"pun\">}</span></code></li><li class=\"L6\"><code></code></li><li class=\"L7\"><code><span class=\"pln\">    </span><span class=\"kwd\">private</span><span class=\"pln\"> </span><span class=\"typ\">UploadResponse</span><span class=\"pln\"> create</span><span class=\"pun\">(</span><span class=\"typ\">Response</span><span class=\"pln\"> response</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"typ\">String</span><span class=\"pln\"> filename</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L8\"><code><span class=\"pln\">        </span><span class=\"typ\">UploadResponse</span><span class=\"pln\"> uploadResponse </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">UploadResponse</span><span class=\"pun\">();</span></code></li><li class=\"L9\"><code><span class=\"pln\">        </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">response </span><span class=\"pun\">==</span><span class=\"pln\"> </span><span class=\"kwd\">null</span><span class=\"pln\"> </span><span class=\"pun\">||</span><span class=\"pln\"> </span><span class=\"pun\">!</span><span class=\"pln\">response</span><span class=\"pun\">.</span><span class=\"pln\">isOK</span><span class=\"pun\">())</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L0\"><code></code></li><li class=\"L1\"><code><span class=\"pln\">            uploadResponse</span><span class=\"pun\">.</span><span class=\"pln\">setSuccess</span><span class=\"pun\">(</span><span class=\"lit\">0</span><span class=\"pun\">);</span></code></li><li class=\"L2\"><code><span class=\"pln\">            </span><span class=\"kwd\">try</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L3\"><code><span class=\"pln\">                uploadResponse</span><span class=\"pun\">.</span><span class=\"pln\">setMessage</span><span class=\"pun\">(</span><span class=\"pln\">response</span><span class=\"pun\">.</span><span class=\"pln\">bodyString</span><span class=\"pun\">());</span></code></li><li class=\"L4\"><code><span class=\"pln\">            </span><span class=\"pun\">}</span><span class=\"pln\"> </span><span class=\"kwd\">catch</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"typ\">QiniuException</span><span class=\"pln\"> e</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">                e</span><span class=\"pun\">.</span><span class=\"pln\">printStackTrace</span><span class=\"pun\">();</span></code></li><li class=\"L6\"><code><span class=\"pln\">            </span><span class=\"pun\">}</span></code></li><li class=\"L7\"><code><span class=\"pln\">        </span><span class=\"pun\">}</span><span class=\"pln\"> </span><span class=\"kwd\">else</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L8\"><code></code></li><li class=\"L9\"><code><span class=\"pln\">            uploadResponse</span><span class=\"pun\">.</span><span class=\"pln\">setSuccess</span><span class=\"pun\">(</span><span class=\"lit\">1</span><span class=\"pun\">);</span></code></li><li class=\"L0\"><code><span class=\"pln\">            uploadResponse</span><span class=\"pun\">.</span><span class=\"pln\">setUrl</span><span class=\"pun\">(</span><span class=\"pln\">applicationConfig</span><span class=\"pun\">.</span><span class=\"pln\">getQiniu_domain</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"str\">\"/\"</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> filename</span><span class=\"pun\">);</span></code></li><li class=\"L1\"><code><span class=\"pln\">        </span><span class=\"pun\">}</span></code></li><li class=\"L2\"><code><span class=\"pln\">        </span><span class=\"kwd\">return</span><span class=\"pln\"> uploadResponse</span><span class=\"pun\">;</span></code></li><li class=\"L3\"><code><span class=\"pln\">    </span><span class=\"pun\">}</span></code></li><li class=\"L4\"><code></code></li><li class=\"L5\"><code><span class=\"pln\">    </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">UploadResponse</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L6\"><code></code></li><li class=\"L7\"><code><span class=\"pln\">        </span><span class=\"com\">//        {</span></code></li><li class=\"L8\"><code><span class=\"com\">//            success : 0 | 1,           // 0 表示上传失败，1 表示上传成功</span></code></li><li class=\"L9\"><code><span class=\"com\">//                    message : \"提示的信息，上传成功或上传失败及错误信息等。\",</span></code></li><li class=\"L0\"><code><span class=\"com\">//                url     : \"图片地址\"        // 上传成功时才返回</span></code></li><li class=\"L1\"><code><span class=\"com\">//        }</span></code></li><li class=\"L2\"><code><span class=\"pln\">        </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> success</span><span class=\"pun\">;</span></code></li><li class=\"L3\"><code></code></li><li class=\"L4\"><code><span class=\"pln\">        </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"typ\">String</span><span class=\"pln\"> url</span><span class=\"pun\">;</span></code></li><li class=\"L5\"><code></code></li><li class=\"L6\"><code><span class=\"pln\">        </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"typ\">String</span><span class=\"pln\"> message</span><span class=\"pun\">;</span></code></li><li class=\"L7\"><code></code></li><li class=\"L8\"><code><span class=\"pln\">        </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pln\"> getSuccess</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">            </span><span class=\"kwd\">return</span><span class=\"pln\"> success</span><span class=\"pun\">;</span></code></li><li class=\"L0\"><code><span class=\"pln\">        </span><span class=\"pun\">}</span></code></li><li class=\"L1\"><code></code></li><li class=\"L2\"><code><span class=\"pln\">        </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">void</span><span class=\"pln\"> setSuccess</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> success</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L3\"><code><span class=\"pln\">            </span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">success </span><span class=\"pun\">=</span><span class=\"pln\"> success</span><span class=\"pun\">;</span></code></li><li class=\"L4\"><code><span class=\"pln\">        </span><span class=\"pun\">}</span></code></li><li class=\"L5\"><code></code></li><li class=\"L6\"><code><span class=\"pln\">        </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"typ\">String</span><span class=\"pln\"> getUrl</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L7\"><code><span class=\"pln\">            </span><span class=\"kwd\">return</span><span class=\"pln\"> url</span><span class=\"pun\">;</span></code></li><li class=\"L8\"><code><span class=\"pln\">        </span><span class=\"pun\">}</span></code></li><li class=\"L9\"><code></code></li><li class=\"L0\"><code><span class=\"pln\">        </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">void</span><span class=\"pln\"> setUrl</span><span class=\"pun\">(</span><span class=\"typ\">String</span><span class=\"pln\"> url</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">            </span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">url </span><span class=\"pun\">=</span><span class=\"pln\"> url</span><span class=\"pun\">;</span></code></li><li class=\"L2\"><code><span class=\"pln\">        </span><span class=\"pun\">}</span></code></li><li class=\"L3\"><code></code></li><li class=\"L4\"><code><span class=\"pln\">        </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"typ\">String</span><span class=\"pln\"> getMessage</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">            </span><span class=\"kwd\">return</span><span class=\"pln\"> message</span><span class=\"pun\">;</span></code></li><li class=\"L6\"><code><span class=\"pln\">        </span><span class=\"pun\">}</span></code></li><li class=\"L7\"><code></code></li><li class=\"L8\"><code><span class=\"pln\">        </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">void</span><span class=\"pln\"> setMessage</span><span class=\"pun\">(</span><span class=\"typ\">String</span><span class=\"pln\"> message</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">            </span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">message </span><span class=\"pun\">=</span><span class=\"pln\"> message</span><span class=\"pun\">;</span></code></li><li class=\"L0\"><code><span class=\"pln\">        </span><span class=\"pun\">}</span></code></li><li class=\"L1\"><code></code></li><li class=\"L2\"><code></code></li><li class=\"L3\"><code><span class=\"pln\">    </span><span class=\"pun\">}</span></code></li><li class=\"L4\"><code><span class=\"pun\">}</span></code></li></ol></pre>', 'xiexx', '2016-12-25', null);
INSERT INTO `blog` VALUES ('2', '个性化宝贝分类', null, 'java', '### 项目背景\\r\\n\\r\\n任何一个应用都需要后台管理系统。凡是后台系统又都涉及到认证与授权，必然也会经历用户角色权限这三步曲，当然也会经历重复但极其繁锁的页面设计，还希望页面能高大上点......\\r\\n\\r\\n软件开发从来就没有银弹，很多人都想着设计一枚银弹，结果发现造出来的东西要么华而不实，要么技术框架落后不够现代化，要么不是主流技术，总之，我是很想找到一个已有的产品直接使用，但是真的没有找到一个符合我心意的。最终决定从头开始，重新做一个自己认为能够真正解决大部分人需求的最小通用后台管理系统，这便是admin-manage产生的初衷。\\r\\n\\r\\n### 主要特点\\r\\n\\r\\n1.全现代化web应用\\r\\n\\r\\n基于adminlte的页面模板，响应式布局，不低俗的ui，内嵌服务器，打成jar包即可运行。\\r\\n\\r\\n2.基于最主流最新的技术框架，满足绝大多数人的技术选型需求。\\r\\n\\r\\n首选spring 技术栈。spring boot ，spring security 作为核心技术框架，spring session 会话管理，spring cache缓存管理，thymeleaf作为模板引擎。使用最主流的技术使前后端技术维护更容易，想怎样改就怎样改。模型设计理念参考ddd。\\r\\n\\r\\n3.坚持实用性第一，只保留最小后台管理系统内核功能。\\r\\n\\r\\n只提供后台管理系统最基本的认证，授权，用户与角色及最基本常用的系统管理功能。无任何强制约束，无任何深奥设计，简单直白。期望作为一个后台管理内核嵌入你的后台应用，真正的关注对业务的管理。\\r\\n\\r\\n### 权限控制设计简述\\r\\n\\r\\n依然使用用户>角色>权限模型。一个用户具有多个角色，任意一个角色具备权限即可。对于权限，从实用性的角度，只设计了针对url访问的权限，支持ant风格的通配符。\\r\\n\\r\\n在admin-manage中，权限是指需要保护的url，需要配置到权限仓储中才会保护此url，否则任何认证了的用户都能访问此url。这样设计的意图也是简化管理admin-manage本身，避免一些不需要保护的资源为了能正常访问而需要配置成权限。\\r\\n\\r\\n同时，借鉴linux的root帐户机制，内置一个固定名称为root的帐户作为超级管理员，方便日常开发调试，方便站点真正的管理员。\\r\\n\\r\\n实现方式只是在spring security 过滤器链中插入了一个自定义过滤器，加载仓储中的用户角色及权限信息，拦截url，实现访问控制。\\r\\n\\r\\n### 本地运行\\r\\n\\r\\n项目基于idea和gradle环境，仓储目前是mysql。源码中有mysql脚本。系统全部配置在application-default.yml，执行完数据库脚本,修改相应数据源配置，直接运行Application.java即可，相信只要搞过java熟悉过springboot的都能运行起来，没什么技术含量。正常启动后浏览器打开\\r\\nhttp://localhost:10000\\r\\n账号root,密码root\\r\\n\\r\\n项目地址\\r\\nhttp://git.oschina.net/mvc-easy/admin-manage\\r\\n\\r\\n注意，主分支master目前正在与我的博客系统同步开发中，请使用mini-admin-manage分支\\r\\n\\r\\n线上演示\\r\\nhttp://xiexx.tech/\\r\\ndemo/demo\\r\\n\\r\\n效果预览\\r\\n\\r\\n\\r\\n', '<h3 id=\"h3--r-n-r-n-r-n-r-n-admin-manage-r-n-r-n-r-n-r-n1-web-r-n-r-n-adminlte-ui-jar-r-n-r-n2-r-n-r-n-spring-spring-boot-spring-security-spring-session-spring-cache-thymeleaf-ddd-r-n-r-n3-r-n-r-n-r-n-r-n-r-n-r-n-gt-gt-url-ant-r-n-r-n-admin-manage-url-url-url-admin-manage-r-n-r-n-linux-root-root-r-n-r-n-spring-security-url-r-n-r-n-r-n-r-n-idea-gradle-mysql-mysql-application-default-yml-application-java-java-springboot-r-n-http-localhost-10000-r-n-root-root-r-n-r-n-r-nhttp-git-oschina-net-mvc-easy-admin-manage-r-n-r-n-master-mini-admin-manage-r-n-r-n-r-nhttp-xiexx-tech-r-ndemo-demo-r-n-r-n-r-n-r-n-r-n\"><a name=\"项目背景\\r\\n\\r\\n任何一个应用都需要后台管理系统。凡是后台系统又都涉及到认证与授权，必然也会经历用户角色权限这三步曲，当然也会经历重复但极其繁锁的页面设计，还希望页面能高大上点……\\r\\n\\r\\n软件开发从来就没有银弹，很多人都想着设计一枚银弹，结果发现造出来的东西要么华而不实，要么技术框架落后不够现代化，要么不是主流技术，总之，我是很想找到一个已有的产品直接使用，但是真的没有找到一个符合我心意的。最终决定从头开始，重新做一个自己认为能够真正解决大部分人需求的最小通用后台管理系统，这便是admin-manage产生的初衷。\\r\\n\\r\\n### 主要特点\\r\\n\\r\\n1.全现代化web应用\\r\\n\\r\\n基于adminlte的页面模板，响应式布局，不低俗的ui，内嵌服务器，打成jar包即可运行。\\r\\n\\r\\n2.基于最主流最新的技术框架，满足绝大多数人的技术选型需求。\\r\\n\\r\\n首选spring 技术栈。spring boot ，spring security 作为核心技术框架，spring session 会话管理，spring cache缓存管理，thymeleaf作为模板引擎。使用最主流的技术使前后端技术维护更容易，想怎样改就怎样改。模型设计理念参考ddd。\\r\\n\\r\\n3.坚持实用性第一，只保留最小后台管理系统内核功能。\\r\\n\\r\\n只提供后台管理系统最基本的认证，授权，用户与角色及最基本常用的系统管理功能。无任何强制约束，无任何深奥设计，简单直白。期望作为一个后台管理内核嵌入你的后台应用，真正的关注对业务的管理。\\r\\n\\r\\n### 权限控制设计简述\\r\\n\\r\\n依然使用用户>角色>权限模型。一个用户具有多个角色，任意一个角色具备权限即可。对于权限，从实用性的角度，只设计了针对url访问的权限，支持ant风格的通配符。\\r\\n\\r\\n在admin-manage中，权限是指需要保护的url，需要配置到权限仓储中才会保护此url，否则任何认证了的用户都能访问此url。这样设计的意图也是简化管理admin-manage本身，避免一些不需要保护的资源为了能正常访问而需要配置成权限。\\r\\n\\r\\n同时，借鉴linux的root帐户机制，内置一个固定名称为root的帐户作为超级管理员，方便日常开发调试，方便站点真正的管理员。\\r\\n\\r\\n实现方式只是在spring security 过滤器链中插入了一个自定义过滤器，加载仓储中的用户角色及权限信息，拦截url，实现访问控制。\\r\\n\\r\\n### 本地运行\\r\\n\\r\\n项目基于idea和gradle环境，仓储目前是mysql。源码中有mysql脚本。系统全部配置在application-default.yml，执行完数据库脚本,修改相应数据源配置，直接运行Application.java即可，相信只要搞过java熟悉过springboot的都能运行起来，没什么技术含量。正常启动后浏览器打开\\r\\n  http://localhost:10000\\r\\n账号root,密码root\\r\\n\\r\\n项目地址\\r\\nhttp://git.oschina.net/mvc-easy/admin-manage\\r\\n\\r\\n注意，主分支master目前正在与我的博客系统同步开发中，请使用mini-admin-manage分支\\r\\n\\r\\n线上演示\\r\\nhttp://xiexx.tech/\\r\\ndemo/demo\\r\\n\\r\\n效果预览\\r\\n\\r\\n\\r\\n\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>项目背景\\r\\n\\r\\n任何一个应用都需要后台管理系统。凡是后台系统又都涉及到认证与授权，必然也会经历用户角色权限这三步曲，当然也会经历重复但极其繁锁的页面设计，还希望页面能高大上点……\\r\\n\\r\\n软件开发从来就没有银弹，很多人都想着设计一枚银弹，结果发现造出来的东西要么华而不实，要么技术框架落后不够现代化，要么不是主流技术，总之，我是很想找到一个已有的产品直接使用，但是真的没有找到一个符合我心意的。最终决定从头开始，重新做一个自己认为能够真正解决大部分人需求的最小通用后台管理系统，这便是admin-manage产生的初衷。\\r\\n\\r\\n### 主要特点\\r\\n\\r\\n1.全现代化web应用\\r\\n\\r\\n基于adminlte的页面模板，响应式布局，不低俗的ui，内嵌服务器，打成jar包即可运行。\\r\\n\\r\\n2.基于最主流最新的技术框架，满足绝大多数人的技术选型需求。\\r\\n\\r\\n首选spring 技术栈。spring boot ，spring security 作为核心技术框架，spring session 会话管理，spring cache缓存管理，thymeleaf作为模板引擎。使用最主流的技术使前后端技术维护更容易，想怎样改就怎样改。模型设计理念参考ddd。\\r\\n\\r\\n3.坚持实用性第一，只保留最小后台管理系统内核功能。\\r\\n\\r\\n只提供后台管理系统最基本的认证，授权，用户与角色及最基本常用的系统管理功能。无任何强制约束，无任何深奥设计，简单直白。期望作为一个后台管理内核嵌入你的后台应用，真正的关注对业务的管理。\\r\\n\\r\\n### 权限控制设计简述\\r\\n\\r\\n依然使用用户&gt;角色&gt;权限模型。一个用户具有多个角色，任意一个角色具备权限即可。对于权限，从实用性的角度，只设计了针对url访问的权限，支持ant风格的通配符。\\r\\n\\r\\n在admin-manage中，权限是指需要保护的url，需要配置到权限仓储中才会保护此url，否则任何认证了的用户都能访问此url。这样设计的意图也是简化管理admin-manage本身，避免一些不需要保护的资源为了能正常访问而需要配置成权限。\\r\\n\\r\\n同时，借鉴linux的root帐户机制，内置一个固定名称为root的帐户作为超级管理员，方便日常开发调试，方便站点真正的管理员。\\r\\n\\r\\n实现方式只是在spring security 过滤器链中插入了一个自定义过滤器，加载仓储中的用户角色及权限信息，拦截url，实现访问控制。\\r\\n\\r\\n### 本地运行\\r\\n\\r\\n项目基于idea和gradle环境，仓储目前是mysql。源码中有mysql脚本。系统全部配置在application-default.yml，执行完数据库脚本,修改相应数据源配置，直接运行Application.java即可，相信只要搞过java熟悉过springboot的都能运行起来，没什么技术含量。正常启动后浏览器打开\\r\\n<a href=\"http://localhost:10000\\r\\n账号root,密码root\\r\\n\\r\\n项目地址\\r\\nhttp://git.oschina.net/mvc-easy/admin-manage\\r\\n\\r\\n注意，主分支master目前正在与我的博客系统同步开发中，请使用mini-admin-manage分支\\r\\n\\r\\n线上演示\\r\\nhttp://xiexx.tech/\\r\\ndemo/demo\\r\\n\\r\\n效果预览\\r\\n\\r\\n\\r\\n\">http://localhost:10000\\r\\n账号root,密码root\\r\\n\\r\\n项目地址\\r\\nhttp://git.oschina.net/mvc-easy/admin-manage\\r\\n\\r\\n注意，主分支master目前正在与我的博客系统同步开发中，请使用mini-admin-manage分支\\r\\n\\r\\n线上演示\\r\\nhttp://xiexx.tech/\\r\\ndemo/demo\\r\\n\\r\\n效果预览\\r\\n\\r\\n\\r\\n</a></h3>', 'xiexx', '2017-01-05', null);
INSERT INTO `blog_views` VALUES ('1', '1');
INSERT INTO `blog_views` VALUES ('3', '1');
INSERT INTO `book` VALUES ('7e63c96b-6f4f-49e4-9b1c-f3a3ae0f44b1', 'faf', 'java', 'http://ohtnk29z2.bkt.clouddn.com/14838564657813506java5.png', '', '2017-01-08');
INSERT INTO `book` VALUES ('e7a67b94-7d3c-49ed-a6d0-186c036a920f', 'fa', 'java', 'http://ohtnk29z2.bkt.clouddn.com/14838888849274209error.png', 'fafa', '2017-01-08');
INSERT INTO `book_index` VALUES ('1', 'diyizhang', '0', '10', '1', '/book/e7a67b94-7d3c-49ed-a6d0-186c036a920f/blog/2', '0', null, '0', 'e7a67b94-7d3c-49ed-a6d0-186c036a920f');
INSERT INTO `book_index` VALUES ('2', 'baidu', '0', '10', '1', 'http://www.baidu.com', '1', null, '0', 'e7a67b94-7d3c-49ed-a6d0-186c036a920f');
INSERT INTO `book_index` VALUES ('faa', 'gagaga', '0', '2', '1', '/book/e7a67b94-7d3c-49ed-a6d0-186c036a920f/blog/2', '0', null, '0', 'e7a67b94-7d3c-49ed-a6d0-186c036a920f');
INSERT INTO `book_index` VALUES ('faf', 'blogsite', '0', '10', '1', 'http://www.baidu.com', '1', null, '0', 'e7a67b94-7d3c-49ed-a6d0-186c036a920f');
INSERT INTO `catalog` VALUES ('java', 'Java', '0', '10', '1', '/catalog/java', '0', null, '0');
INSERT INTO `catalog` VALUES ('spring', 'spring', '0', '10', '1', '', '1', null, '0');
INSERT INTO `nav` VALUES ('blog', '博客', '0', '1', '1', '/blog', '1', '', '0');
INSERT INTO `nav` VALUES ('qq', '交流群', '0', '3', '1', '/', '2', '', '0');
INSERT INTO `nav` VALUES ('video', '教学视频', '0', '2', '1', '#', '1', '', '0');
INSERT INTO `nav` VALUES ('video-chuanke', 'xiexx-百度传课', '0,video', '2', '1', 'http://www.chuanke.com/s.html', '2', '', '0');
INSERT INTO `nav` VALUES ('video-qq', 'xiexx-QQ课堂', '0,video', '1', '1', 'http://xiexx.ke.qq.com', '2', '', '0');
INSERT INTO `nav` VALUES ('xianzao', '天然手工香皂', '0', '4', '1', 'https://weidian.com/s/941509267?wfr=c', '2', '', '0');
INSERT INTO `site_config` VALUES ('_csrf', 'f3494359-4f13-4195-a4eb-ba50780ffda9');
INSERT INTO `site_config` VALUES ('keywords', 'xiexx博客,Java技术,Java自学');
INSERT INTO `site_config` VALUES ('description', 'xiexx博客是一个深度研究IT技术的高质量技术博客');
INSERT INTO `site_config` VALUES ('pageSize', '15');
INSERT INTO `site_config` VALUES ('name', '@xiexx博客');
INSERT INTO `site_config` VALUES ('beian', '京ICP备XXXXXXX号-1');
INSERT INTO `site_config` VALUES ('logo', '/themes/jiestyle/images/logo.png');
